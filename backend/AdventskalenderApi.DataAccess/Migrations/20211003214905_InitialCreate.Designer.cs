// <auto-generated />
using System;
using AdventskalenderApi.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AdventskalenderApi.DataAccess.Migrations
{
    [DbContext(typeof(AdventskalenderApiContext))]
    [Migration("20211003214905_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AdventskalenderApi.DataAccess.Models.AppSetting", b =>
                {
                       b.Property<Guid>("Id")
                           .ValueGeneratedOnAdd()
                           .HasColumnType("uniqueidentifier");

                       b.Property<string>("AccentColor")
                           .HasColumnType("nvarchar(max)");

                       b.Property<string>("AppName")
                           .HasColumnType("nvarchar(max)");

                       b.Property<string>("AppStoreUrl")
                           .HasColumnType("nvarchar(max)");

                       b.Property<string>("AppStoreVersion")
                           .HasColumnType("nvarchar(max)");

                       b.Property<string>("AzureNotificationHubConnectionString")
                           .HasColumnType("nvarchar(max)");

                       b.Property<string>("AzureNotificationHubName")
                           .HasColumnType("nvarchar(max)");

                       b.Property<string>("BackgroundColor")
                           .HasColumnType("nvarchar(max)");

                       b.Property<string>("BackgroundLogoUrl")
                           .HasColumnType("nvarchar(max)");

                       b.Property<string>("Country")
                           .HasColumnType("nvarchar(max)");

                       b.Property<string>("CultureCode")
                           .HasColumnType("nvarchar(max)");

                       b.Property<string>("DangerColor")
                           .HasColumnType("nvarchar(max)");

                       b.Property<string>("EmailConfirmationTemplate")
                           .HasColumnType("nvarchar(max)");

                       b.Property<string>("LightColor")
                           .HasColumnType("nvarchar(max)");

                       b.Property<string>("LogoBackgroundSize")
                           .HasColumnType("nvarchar(max)");

                       b.Property<string>("LogoUrl")
                           .HasColumnType("nvarchar(max)");

                       b.Property<string>("MediumColor")
                           .HasColumnType("nvarchar(max)");

                       b.Property<string>("PlayStoreUrl")
                           .HasColumnType("nvarchar(max)");

                       b.Property<string>("PlayStoreVersion")
                           .HasColumnType("nvarchar(max)");

                       b.Property<string>("PrimaryColor")
                           .HasColumnType("nvarchar(max)");

                       b.Property<string>("PrimaryContrastColor")
                           .HasColumnType("nvarchar(max)");

                       b.Property<string>("SecondaryColor")
                           .HasColumnType("nvarchar(max)");

                       b.Property<string>("SecondaryContrastColor")
                           .HasColumnType("nvarchar(max)");

                       b.Property<string>("SmtpHost")
                           .HasColumnType("nvarchar(max)");

                       b.Property<string>("SmtpPassword")
                           .HasColumnType("nvarchar(max)");

                       b.Property<string>("SmtpPort")
                           .HasColumnType("nvarchar(max)");

                       b.Property<string>("SmtpSenderEmailAddress")
                           .HasColumnType("nvarchar(max)");

                       b.Property<string>("SmtpUsername")
                           .HasColumnType("nvarchar(max)");

                       b.Property<string>("SuccessColor")
                           .HasColumnType("nvarchar(max)");

                       b.Property<string>("TertiaryColor")
                           .HasColumnType("nvarchar(max)");

                       b.Property<string>("TertiaryContrastColor")
                           .HasColumnType("nvarchar(max)");

                       b.Property<string>("WarningColor")
                           .HasColumnType("nvarchar(max)");

                       b.Property<string>("WelcomeLogoBackgroundSize")
                           .HasColumnType("nvarchar(max)");

                       b.HasKey("Id");

                       b.ToTable("AppSettings");
                });

            modelBuilder.Entity("AdventskalenderApi.DataAccess.Models.Gewinn", b =>
                {
                       b.Property<Guid>("Id")
                           .ValueGeneratedOnAdd()
                           .HasColumnType("uniqueidentifier");

                       b.Property<string>("Beschreibung")
                           .HasColumnType("nvarchar(max)");

                       b.Property<int>("Losnummer")
                           .HasColumnType("int");

                       b.Property<int>("Tag")
                           .HasColumnType("int");

                       b.HasKey("Id");

                       b.ToTable("Gewinne");
                });

            modelBuilder.Entity("AdventskalenderApi.DataAccess.Models.Identity.ApplicationRole", b =>
                {
                       b.Property<Guid>("Id")
                           .ValueGeneratedOnAdd()
                           .HasColumnType("uniqueidentifier");

                       b.Property<string>("ConcurrencyStamp")
                           .IsConcurrencyToken()
                           .HasColumnType("nvarchar(max)");

                       b.Property<string>("Name")
                           .HasMaxLength(256)
                           .HasColumnType("nvarchar(256)");

                       b.Property<string>("NormalizedName")
                           .HasMaxLength(256)
                           .HasColumnType("nvarchar(256)");

                       b.Property<string>("TenantId")
                           .HasColumnType("nvarchar(max)");

                       b.HasKey("Id");

                       b.HasIndex("NormalizedName")
                           .IsUnique()
                           .HasDatabaseName("RoleNameIndex")
                           .HasFilter("[NormalizedName] IS NOT NULL");

                       b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("AdventskalenderApi.DataAccess.Models.Identity.ApplicationUser", b =>
                {
                       b.Property<Guid>("Id")
                           .ValueGeneratedOnAdd()
                           .HasColumnType("uniqueidentifier");

                       b.Property<int>("AccessFailedCount")
                           .HasColumnType("int");

                       b.Property<string>("ConcurrencyStamp")
                           .IsConcurrencyToken()
                           .HasColumnType("nvarchar(max)");

                       b.Property<string>("Email")
                           .HasMaxLength(256)
                           .HasColumnType("nvarchar(256)");

                       b.Property<bool>("EmailConfirmed")
                           .HasColumnType("bit");

                       b.Property<bool>("LockoutEnabled")
                           .HasColumnType("bit");

                       b.Property<DateTimeOffset?>("LockoutEnd")
                           .HasColumnType("datetimeoffset");

                       b.Property<Guid?>("MemberId")
                           .HasColumnType("uniqueidentifier");

                       b.Property<string>("NormalizedEmail")
                           .HasMaxLength(256)
                           .HasColumnType("nvarchar(256)");

                       b.Property<string>("NormalizedUserName")
                           .HasMaxLength(256)
                           .HasColumnType("nvarchar(256)");

                       b.Property<Guid?>("OrganisationId")
                           .HasColumnType("uniqueidentifier");

                       b.Property<string>("OrganisationName")
                           .HasColumnType("nvarchar(max)");

                       b.Property<string>("PasswordHash")
                           .HasColumnType("nvarchar(max)");

                       b.Property<string>("PhoneNumber")
                           .HasColumnType("nvarchar(max)");

                       b.Property<bool>("PhoneNumberConfirmed")
                           .HasColumnType("bit");

                       b.Property<string>("SecurityStamp")
                           .HasColumnType("nvarchar(max)");

                       b.Property<string>("TenantId")
                           .HasColumnType("nvarchar(max)");

                       b.Property<bool>("TwoFactorEnabled")
                           .HasColumnType("bit");

                       b.Property<string>("UserName")
                           .HasMaxLength(256)
                           .HasColumnType("nvarchar(256)");

                       b.HasKey("Id");

                       b.HasIndex("NormalizedEmail")
                           .HasDatabaseName("EmailIndex");

                       b.HasIndex("NormalizedUserName")
                           .IsUnique()
                           .HasDatabaseName("UserNameIndex")
                           .HasFilter("[NormalizedUserName] IS NOT NULL");

                       b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                       b.Property<int>("Id")
                           .ValueGeneratedOnAdd()
                           .HasColumnType("int")
                           .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                       b.Property<string>("ClaimType")
                           .HasColumnType("nvarchar(max)");

                       b.Property<string>("ClaimValue")
                           .HasColumnType("nvarchar(max)");

                       b.Property<Guid>("RoleId")
                           .HasColumnType("uniqueidentifier");

                       b.HasKey("Id");

                       b.HasIndex("RoleId");

                       b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                       b.Property<int>("Id")
                           .ValueGeneratedOnAdd()
                           .HasColumnType("int")
                           .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                       b.Property<string>("ClaimType")
                           .HasColumnType("nvarchar(max)");

                       b.Property<string>("ClaimValue")
                           .HasColumnType("nvarchar(max)");

                       b.Property<Guid>("UserId")
                           .HasColumnType("uniqueidentifier");

                       b.HasKey("Id");

                       b.HasIndex("UserId");

                       b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                       b.Property<string>("LoginProvider")
                           .HasColumnType("nvarchar(450)");

                       b.Property<string>("ProviderKey")
                           .HasColumnType("nvarchar(450)");

                       b.Property<string>("ProviderDisplayName")
                           .HasColumnType("nvarchar(max)");

                       b.Property<Guid>("UserId")
                           .HasColumnType("uniqueidentifier");

                       b.HasKey("LoginProvider", "ProviderKey");

                       b.HasIndex("UserId");

                       b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                       b.Property<Guid>("UserId")
                           .HasColumnType("uniqueidentifier");

                       b.Property<Guid>("RoleId")
                           .HasColumnType("uniqueidentifier");

                       b.HasKey("UserId", "RoleId");

                       b.HasIndex("RoleId");

                       b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                       b.Property<Guid>("UserId")
                           .HasColumnType("uniqueidentifier");

                       b.Property<string>("LoginProvider")
                           .HasColumnType("nvarchar(450)");

                       b.Property<string>("Name")
                           .HasColumnType("nvarchar(450)");

                       b.Property<string>("Value")
                           .HasColumnType("nvarchar(max)");

                       b.HasKey("UserId", "LoginProvider", "Name");

                       b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                       b.HasOne("AdventskalenderApi.DataAccess.Models.Identity.ApplicationRole", null)
                           .WithMany()
                           .HasForeignKey("RoleId")
                           .OnDelete(DeleteBehavior.Cascade)
                           .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                       b.HasOne("AdventskalenderApi.DataAccess.Models.Identity.ApplicationUser", null)
                           .WithMany()
                           .HasForeignKey("UserId")
                           .OnDelete(DeleteBehavior.Cascade)
                           .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                       b.HasOne("AdventskalenderApi.DataAccess.Models.Identity.ApplicationUser", null)
                           .WithMany()
                           .HasForeignKey("UserId")
                           .OnDelete(DeleteBehavior.Cascade)
                           .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                       b.HasOne("AdventskalenderApi.DataAccess.Models.Identity.ApplicationRole", null)
                           .WithMany()
                           .HasForeignKey("RoleId")
                           .OnDelete(DeleteBehavior.Cascade)
                           .IsRequired();

                       b.HasOne("AdventskalenderApi.DataAccess.Models.Identity.ApplicationUser", null)
                           .WithMany()
                           .HasForeignKey("UserId")
                           .OnDelete(DeleteBehavior.Cascade)
                           .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                       b.HasOne("AdventskalenderApi.DataAccess.Models.Identity.ApplicationUser", null)
                           .WithMany()
                           .HasForeignKey("UserId")
                           .OnDelete(DeleteBehavior.Cascade)
                           .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
